using System;
using System.IO;
using ConsoleApp.Stahlwerk;
using ConsoleApp.Stahlwerk.Anlagen;
using ConsoleApp.Stahlwerk.Erzeugungsvorschriften;
using ConsoleApp.Stahlwerk.Verkaufen;
using SqlMapper;
using SqlMapper.SqlObjects;

namespace ConsoleApp
{
    public static class Program
    {
        public static void Main(string[] args)
        {
            var mapper = new CSharpToSqlMapper();
            mapper.Schema.Name = "if150185";
            const string StahlwerkTag = "Stahlwerk";
            mapper.AddTable(typeof(Charge), StahlwerkTag);
            mapper.AddTable(typeof(SchnittplanTeil), StahlwerkTag);

            const string EzvTag = "Erzeugungsvorschrift";
            mapper.AddTable(typeof(EzvGruppe), EzvTag);
            mapper.AddTable(typeof(Ezv), EzvTag);
            mapper.AddTable(typeof(EzvParam), EzvTag);
            mapper.AddTable(typeof(EzvToParamMap), EzvTag);
            mapper.AddTable(typeof(EzvParamText), EzvTag);
            mapper.AddTable(typeof(EzvParamMatrix), EzvTag);
            mapper.AddTable(typeof(EzvParamMatrixElement), EzvTag);

            const string AnlagenTag = "Anlagen";
            mapper.AddTable(typeof(Pfanne), AnlagenTag);
            mapper.AddTable(typeof(Verteiler), AnlagenTag);
            mapper.AddTable(typeof(Kokille), AnlagenTag);
            mapper.AddTable(typeof(Strang), AnlagenTag);
            mapper.AddTable(typeof(KokilleFormat), AnlagenTag);
            mapper.AddTable(typeof(ChargeToPfanneMap), AnlagenTag);
            mapper.AddTable(typeof(ChargeToVerteilerMap), AnlagenTag);
            mapper.AddTable(typeof(ChargeToKokilleMap), AnlagenTag);
            mapper.AddTable(typeof(ChargeToStrangMap), AnlagenTag);

            const string VerkaufenTag = "Verkaufen";
            mapper.AddTable(typeof(Produkt), VerkaufenTag);
            mapper.AddTable(typeof(Warenkorb), VerkaufenTag);
            mapper.AddTable(typeof(WarenkorbEintrag), VerkaufenTag);
            mapper.AddTable(typeof(Bestellung), VerkaufenTag);
            mapper.AddTable(typeof(Lieferung), VerkaufenTag);
            mapper.AddTable(typeof(Lieferdienst), VerkaufenTag);

            mapper.Initialise();

            // TODO: Data inserting
            // TODO: Data inserting --> Generate PL/SQL code

            string path = Path.GetFullPath("D:/Stefan/HTL/5BHIF/DBI/2019-09-16 Ultimate Project/Generated");
            if (!Directory.Exists(path))
            {
                Console.Error.WriteLine("Please create the following directory: " + path);
                return;
            }

            int outputIndex = 1;
            OutputSqlFiles(path, mapper, outputIndex++, StahlwerkTag);
            OutputSqlFiles(path, mapper, outputIndex++, EzvTag);
            OutputSqlFiles(path, mapper, outputIndex++, AnlagenTag);
            OutputSqlFiles(path, mapper, outputIndex++, VerkaufenTag);
        }

        private static void OutputSqlFiles(string path, CSharpToSqlMapper mapper, int outputIndex, string tag)
        {
            OutputText(path, $"{outputIndex}_1_Tables_{tag}.sql", mapper.ToStringCreateOrReplace(tag));
            OutputText(path, $"{outputIndex}_2_Constraints_{tag}.sql", mapper.ToStringAlter(tag));
            OutputText(path, $"{outputIndex}_3_Triggers_{tag}.sql", mapper.ToStringTriggersAndSequences(tag));
        }

        public static void OutputText(string path, string fileName, string content)
        {
            bool outputToFile = true;
            string filePath = Path.Combine(path, fileName);
            if (outputToFile)
            {
                File.WriteAllText(filePath, Header);
                File.AppendAllText(filePath, content);
            }
            else
            {
                var color = Console.ForegroundColor;
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine($"-- {filePath}");
                Console.ForegroundColor = color;
                Console.WriteLine(content);
                Console.WriteLine();
            }
        }

        public static string Header => $"----------------------------------------\n" +
                                       $"--  Autogenerated File - Do Not Edit  --\n" +
                                       $"--  Date: {DateTime.Now.ToString("yyyy-MM-dd")}                  --\n" +
                                       $"----------------------------------------\n\n";

    }
}
