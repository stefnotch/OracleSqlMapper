using System;
using System.IO;
using ConsoleApp.Stahlwerk;
using ConsoleApp.Stahlwerk.Anlagen;
using ConsoleApp.Stahlwerk.Erzeugungsvorschriften;
using ConsoleApp.Stahlwerk.Verkaufen;
using static DataGenerator.DataGeneration;
using SqlMapper;
using SqlMapper.SqlObjects;

namespace ConsoleApp
{
    public static class Program
    {
        public static string Header => $"----------------------------------------\n" +
                                       $"--  Autogenerated File - Do Not Edit  --\n" +
                                       $"--  Date: {DateTime.Now.ToString("yyyy-MM-dd")}                  --\n" +
                                       $"----------------------------------------\n\n";

        public const string StahlwerkTag = "Stahlwerk";
        public const string EzvTag = "Erzeugungsvorschrift";
        public const string AnlagenTag = "Anlagen";
        public const string VerkaufenTag = "Verkaufen";

        public static void Main(string[] args)
        {
            var mapper = new CSharpToSqlMapper();
            mapper.Schema.Name = "if150185";
            mapper.AddTable(typeof(Charge), StahlwerkTag);
            mapper.AddTable(typeof(SchnittplanTeil), StahlwerkTag);

            mapper.AddTable(typeof(EzvGruppe), EzvTag);
            mapper.AddTable(typeof(Ezv), EzvTag);
            mapper.AddTable(typeof(EzvParam), EzvTag);
            mapper.AddTable(typeof(EzvToParamMap), EzvTag);
            mapper.AddTable(typeof(EzvParamText), EzvTag);
            mapper.AddTable(typeof(EzvParamMatrix), EzvTag);
            mapper.AddTable(typeof(EzvParamMatrixElement), EzvTag);

            mapper.AddTable(typeof(Pfanne), AnlagenTag);
            mapper.AddTable(typeof(Verteiler), AnlagenTag);
            mapper.AddTable(typeof(Kokille), AnlagenTag);
            mapper.AddTable(typeof(Strang), AnlagenTag);
            mapper.AddTable(typeof(KokilleFormat), AnlagenTag);
            mapper.AddTable(typeof(ChargeToPfanneMap), AnlagenTag);
            mapper.AddTable(typeof(ChargeToVerteilerMap), AnlagenTag);
            mapper.AddTable(typeof(ChargeToKokilleMap), AnlagenTag);
            mapper.AddTable(typeof(ChargeToStrangMap), AnlagenTag);

            mapper.AddTable(typeof(Produkt), VerkaufenTag);
            mapper.AddTable(typeof(Warenkorb), VerkaufenTag);
            mapper.AddTable(typeof(WarenkorbEintrag), VerkaufenTag);
            mapper.AddTable(typeof(Bestellung), VerkaufenTag);
            mapper.AddTable(typeof(Lieferung), VerkaufenTag);
            mapper.AddTable(typeof(Lieferdienst), VerkaufenTag);

            mapper.Initialise();

            AddInserts(mapper);

            // TODO: 1. Data inserting statements
            // TODO: 2. Data inserting --> Generate PL/SQL code

            string path = Path.GetFullPath("D:/Stefan/HTL/5BHIF/DBI/2019-09-16 Ultimate Project/Generated");
            if (!Directory.Exists(path))
            {
                Console.Error.WriteLine("Please create the following directory: " + path);
                return;
            }

            int outputIndex = 1;
            OutputSqlFiles(path, mapper, outputIndex++, StahlwerkTag);
            OutputSqlFiles(path, mapper, outputIndex++, EzvTag);
            OutputSqlFiles(path, mapper, outputIndex++, AnlagenTag);
            OutputSqlFiles(path, mapper, outputIndex++, VerkaufenTag);
        }

        private static void AddInserts(CSharpToSqlMapper mapper)
        {
            var ezvGruppen = mapper.InsertsFor<EzvGruppe>()
                .Set(e => e.Id, Count())
                .Set(e => e.Name, Join(Value("Gruppe "), SequentialFrom("Auto", "Flugzeug", "Bau")))
                .Generate(3);

            var ezvs = mapper.InsertsFor<Ezv>()
                .Set(e => e.Id, Count())
                .Set(e => e.EzvGruppe, RepeatEach(SequentialFrom(ezvGruppen), 4))
                .Set(e => e.Name, SequentialFrom("Grobblech", "Stahl", "Feinblech", "Weissblech"))
                .Generate(4 * ezvGruppen.Count);

            // TODO: EzvParam

            int anlagenAnzahl = 3;
            var anlagenOrte = RandomFrom("Nord", "Sued", "Ost", "West");
            var pfannen = mapper.InsertsFor<Pfanne>()
                .Set(e => e.Id, Count())
                .Set(e => e.Name, Join(RandomFrom("Grosse", "Kleine", "Mittlere"), Value(" Pfanne"), Value(" "), anlagenOrte))
                .Set(e => e.Text, Value("Eine Pfanne"))
                .Set(e => e.Lebensdauer, Random(40, 70)) // TODO: Limit it to values like 45,50,55,60,...
                .Set(e => e.Lebensalter, Random(50))
                .Set(e => e.Gewicht, Random(20, 50))
                .Generate(anlagenAnzahl);

            var verteiler = mapper.InsertsFor<Verteiler>()
                .Set(e => e.Id, Count())
                .Set(e => e.Name, Join(RandomFrom("Grosser", "Kleiner", "Mittlerer"), Value(" Verteiler"), Value(" "), anlagenOrte))
                .Set(e => e.Text, Value("Ein Verteiler"))
                .Set(e => e.Lebensdauer, Random(40, 70)) // TODO: Limit it to values like 45,50,55,60,...
                .Set(e => e.Lebensalter, Random(50))
                .Set(e => e.Gewicht, Random(70, 100))
                .Generate(anlagenAnzahl);

            var straenge = mapper.InsertsFor<Strang>()
                .Set(e => e.Id, Count())
                .Set(e => e.Name, Join(RandomFrom("Grosser", "Kleiner", "Mittlerer"), Value(" Strang"), Value(" "), anlagenOrte))
                .Set(e => e.Text, Value("Ein Strang"))
                .Set(e => e.Lebensdauer, Random(40, 70)) // TODO: Limit it to values like 45,50,55,60,...
                .Set(e => e.Lebensalter, Random(50))
                .Set(e => e.Gewicht, Random(70, 100))
                .Generate(anlagenAnzahl);

            var kokillen = mapper.InsertsFor<Kokille>()
                .Set(e => e.Id, Count())
                .Set(e => e.Name, Join(RandomFrom("Grosse", "Kleine", "Mittlere"), Value(" Kokille"), Value(" "), anlagenOrte))
                .Set(e => e.Text, Value("Eine Kokille"))
                .Set(e => e.Lebensdauer, Random(40, 70)) // TODO: Limit it to values like 45,50,55,60,...
                .Set(e => e.Lebensalter, Random(50))
                .Set(e => e.Gewicht, Random(7, 15))
                .Generate(anlagenAnzahl);

            var kokillenFormate = mapper.InsertsFor<KokilleFormat>()
                .Set(e => e.Id, Count())
                .Set(e => e.Kokille, SequentialFrom(kokillen))
                .Set(e => e.Breite, Random(90, 120))
                .Set(e => e.Hoehe, Random(15, 30))
                .Generate(kokillen.Count);

            var chargen = mapper.InsertsFor<Charge>()
                .Set(e => e.Id, Count())
                .Set(e => e.Name, Join(Value("Charge "), Count()))
                .Set(e => e.PlanGewicht, Random(70, 140))
                .Set(e => e.GewichtAbweichung, Random(-15, 15)) // TODO: More often than not, it's simply 0. So, implement an IF(RANDOM()) {} ? Or SWITCH?
                .Set(e => e.Ezv, RandomFrom(ezvs))
                .Set(e => e.KokilleFormat, RandomFrom(kokillenFormate))
                .Generate(20);

            // TODO: https://docs.microsoft.com/en-us/dotnet/api/system.linq.expressions.expressiontype?view=netframework-4.8
            // TODO: Chargen
            // TODO: Schnittplan usw
            // TODO: Produkte
            // TODO: Warenkorb

        }

        private static void OutputSqlFiles(string path, CSharpToSqlMapper mapper, int outputIndex, string tag)
        {
            OutputText(path, $"{outputIndex}_1_Tables_{tag}.sql", mapper.ToStringCreateOrReplace(tag));
            OutputText(path, $"{outputIndex}_2_Constraints_{tag}.sql", mapper.ToStringAlter(tag));
            OutputText(path, $"{outputIndex}_3_Triggers_{tag}.sql", mapper.ToStringTriggersAndSequences(tag));
            OutputText(path, $"{outputIndex}_4_Inserts_{tag}.sql", mapper.ToStringInserts(tag));
        }

        public static void OutputText(string path, string fileName, string content)
        {
            bool outputToFile = true;
            string filePath = Path.Combine(path, fileName);
            if (outputToFile)
            {
                File.WriteAllText(filePath, Header);
                File.AppendAllText(filePath, content);
            }
            else
            {
                var color = Console.ForegroundColor;
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine($"-- {filePath}");
                Console.ForegroundColor = color;
                Console.WriteLine(content);
                Console.WriteLine();
            }
        }
    }
}
