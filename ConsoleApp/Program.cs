using System;
using System.IO;
using ConsoleApp.Stahlwerk;
using ConsoleApp.Stahlwerk.Anlagen;
using ConsoleApp.Stahlwerk.Erzeugungsvorschriften;
using ConsoleApp.Stahlwerk.Verkaufen;
using static DataGenerator.DataGeneration;
using SqlMapper;
using SqlMapper.SqlObjects;
using DataGenerator;
using CSharpToSqlMapper;

namespace ConsoleApp
{
    public static class Program
    {
        public static string Header => $"----------------------------------------\n" +
                                       $"--  Autogenerated File - Do Not Edit  --\n" +
                                       $"--  Date: {DateTime.Now.ToString("yyyy-MM-dd")}                  --\n" +
                                       $"----------------------------------------\n\n";

        public const string StahlwerkTag = "Stahlwerk";
        public const string EzvTag = "Erzeugungsvorschrift";
        public const string AnlagenTag = "Anlagen";
        public const string VerkaufenTag = "Verkaufen";

        public static void Main(string[] args)
        {
            //var plsqlMapper = new CSharpToPlsqlMapper();
            //plsqlMapper.AddExpression<Func<int, int>>("cat", (x) => x + 1);
            //plsqlMapper.AddExpression<Func<int, string>>("cat", (x) => $"{x}");
            var mapper = new Mapper();
            mapper.Schema.Name = "if150185";
            mapper.AddTable<Charge>(StahlwerkTag);
            mapper.AddTable<Produkt>(StahlwerkTag);
            mapper.AddTable<ProduktParam>(StahlwerkTag);
            mapper.AddTable<ProduktSegmentParam>(StahlwerkTag);

            mapper.AddTable<EzvGruppe>(EzvTag);
            mapper.AddTable<Ezv>(EzvTag);
            mapper.AddTable<EzvParam>(EzvTag);
            mapper.AddTable<EzvToParamMap>(EzvTag);
            mapper.AddTable<EzvParamText>(EzvTag);
            mapper.AddTable<EzvParamMatrixElement>(EzvTag);

            mapper.AddTable<Pfanne>(AnlagenTag);
            mapper.AddTable<Verteiler>(AnlagenTag);
            mapper.AddTable<Kokille>(AnlagenTag);
            mapper.AddTable<Strang>(AnlagenTag);
            mapper.AddTable<KokilleFormat>(AnlagenTag);
            mapper.AddTable<ChargeToPfanneMap>(AnlagenTag);
            mapper.AddTable<ChargeToVerteilerMap>(AnlagenTag);
            mapper.AddTable<ChargeToKokilleMap>(AnlagenTag);
            mapper.AddTable<ChargeToStrangMap>(AnlagenTag);

            mapper.AddTable<Warenkorb>(VerkaufenTag);
            mapper.AddTable<ProduktTyp>(VerkaufenTag);
            mapper.AddTable<WarenkorbEintrag>(VerkaufenTag);
            mapper.AddTable<Bestellung>(VerkaufenTag);
            mapper.AddTable<BestellungToProdukteMap>(VerkaufenTag);
            mapper.AddTable<Lieferung>(VerkaufenTag);
            mapper.AddTable<Lieferdienst>(VerkaufenTag);

            mapper.Initialize();

            AddInserts(mapper);

            // TODO: 1. Data inserting statements
            // TODO: 2. Data inserting --> Generate PL/SQL code

            string path = Path.GetFullPath("D:/Stefan/HTL/5BHIF/DBI/2019-09-16 Ultimate Project/Generated");
            if (!Directory.Exists(path))
            {
                Console.Error.WriteLine("Please create the following directory: " + path);
                return;
            }

            int outputIndex = 1;
            OutputSqlFiles(path, mapper, outputIndex++, StahlwerkTag);
            OutputSqlFiles(path, mapper, outputIndex++, EzvTag);
            OutputSqlFiles(path, mapper, outputIndex++, AnlagenTag);
            OutputSqlFiles(path, mapper, outputIndex++, VerkaufenTag);
        }

        private static void AddInserts(Mapper mapper)
        {
            var ezvGruppen = mapper.InsertsFor<EzvGruppe>(3, EzvTag)
                .Set(e => e.Name, Join(Value("Gruppe "), SequentialFrom("Auto", "Flugzeug", "Bau")));

            var ezvs = mapper.InsertsFor<Ezv>(4 * ezvGruppen.Count, EzvTag)
                .Set(e => e.EzvGruppe, RepeatEach(SequentialFrom(ezvGruppen), 4))
                .Set(e => e.Name, SequentialFrom("Grobblech", "Stahl", "Feinblech", "Weissblech"));

            {
                var ezvParamsTemperatur = mapper.InsertsFor<EzvParam>(4, EzvTag)
                    .Set(e => e.Name, Join(Value("Temperatur "), SequentialFrom("Pfanne", "Verteiler", "Strang", "Kokille")))
                    .Set(e => e.MaxWert, Value(3000))
                    .Set(e => e.StandardWert, Value(0))
                    .Set(e => e.MinWert, Value(-100))
                    .Set(e => e.Einheit, Value("Celsius"))
                    .Set(e => e.MessQuelle, Value("Sensor"))
                    .Set(e => e.MessAutomatisch, Value(true))
                    .Set(e => e.MessBereich, SequentialFrom("Pfanne", "Verteiler", "Strang", "Kokille"))
                    .Set(e => e.MessUnterBereich, Join(RandomFrom("Linke ", "Rechte "), Value("Seite")))
                    .Set(e => e.IstAktiv, Value(true))
                    .Set(e => e.ParamDatenTyp, Value(null as Enum))
                    .Set(e => e.ParamTyp, Value(EzvParam.EzvParamTyp.Produktionsparameter));

                var ezvParamsGeschwindigkeit = mapper.InsertsFor<EzvParam>(4, EzvTag)
                    .Set(e => e.Name, Join(Value("Geschwindigkeit "), SequentialFrom("Pfanne", "Verteiler", "Strang", "Kokille")))
                    .Set(e => e.MaxWert, Value(100))
                    .Set(e => e.StandardWert, Value(0))
                    .Set(e => e.MinWert, Value(0))
                    .Set(e => e.Einheit, Value("km/h"))
                    .Set(e => e.MessQuelle, Value("Sensor"))
                    .Set(e => e.MessAutomatisch, Value(true))
                    .Set(e => e.MessBereich, SequentialFrom("Pfanne", "Verteiler", "Strang", "Kokille"))
                    .Set(e => e.MessUnterBereich, Join(RandomFrom("Linke ", "Rechte "), Value("Seite")))
                    .Set(e => e.IstAktiv, Value(true))
                    .Set(e => e.ParamDatenTyp, Value(null as Enum))
                    .Set(e => e.ParamTyp, Value(EzvParam.EzvParamTyp.Produktionsparameter));

                var ezvParamsTemperaturMap = mapper.InsertsFor<EzvToParamMap>(ezvs.Count * ezvParamsTemperatur.Count, EzvTag)
                    .Set(e => e.Ezv, RepeatEach(SequentialFrom(ezvs), ezvParamsTemperatur.Count))
                    .Set(e => e.EzvParam, SequentialFrom(ezvParamsTemperatur))
                    .Set(e => e.MaxWert, Value(2500))
                    .Set(e => e.ZielWert, Value(1500))
                    .Set(e => e.MinWert, Value(800));

                var ezvParamsGeschwindigkeitMap = mapper.InsertsFor<EzvToParamMap>(ezvs.Count * ezvParamsGeschwindigkeit.Count, EzvTag)
                    .Set(e => e.Ezv, RepeatEach(SequentialFrom(ezvs), ezvParamsGeschwindigkeit.Count))
                    .Set(e => e.EzvParam, SequentialFrom(ezvParamsGeschwindigkeit))
                    .Set(e => e.MaxWert, Value(20))
                    .Set(e => e.ZielWert, Value(10))
                    .Set(e => e.MinWert, Value(5));
            }

            {
                var ezvTextParams = mapper.InsertsFor<EzvParam>(1, EzvTag)
                    .Set(e => e.Name, Value("Giesspulver Kokille"))
                    .Set(e => e.MaxWert, Value(3))
                    .Set(e => e.StandardWert, Value(2))
                    .Set(e => e.MinWert, Value(1))
                    .Set(e => e.Einheit, Value("Pulver Art"))
                    .Set(e => e.MessQuelle, Value("Sensor"))
                    .Set(e => e.MessAutomatisch, Value(true))
                    .Set(e => e.MessBereich, Value("Kokille"))
                    .Set(e => e.MessUnterBereich, Value("Linke Seite"))
                    .Set(e => e.IstAktiv, Value(true))
                    .Set(e => e.ParamDatenTyp, Value(EzvParam.DatenTyp.Text))
                    .Set(e => e.ParamTyp, Value(EzvParam.EzvParamTyp.Produktionsparameter));

                var ezvParamTexts = mapper.InsertsFor<EzvParamText>(ezvTextParams.Count * 3, EzvTag)
                    .Set(e => e.EzvParam, SequentialFrom(ezvTextParams))
                    .Set(e => e.TextWert, Count(1))
                    .Set(e => e.Text, SequentialFrom("Rot", "Gelb", "Blau"));

                var ezvTextParamsMap = mapper.InsertsFor<EzvToParamMap>(ezvs.Count * ezvTextParams.Count, EzvTag)
                    .Set(e => e.Ezv, RepeatEach(SequentialFrom(ezvs), ezvTextParams.Count))
                    .Set(e => e.EzvParam, SequentialFrom(ezvTextParams))
                    .Set(e => e.MaxWert, Value(3))
                    .Set(e => e.ZielWert, Value(2))
                    .Set(e => e.MinWert, Value(1));
            }

            {
                var ezvMatrixParams = mapper.InsertsFor<EzvParam>(1, EzvTag)
                    .Set(e => e.Name, Value("Kuehlzohnen Wassermenge"))
                    .Set(e => e.MaxWert, Value(10))
                    .Set(e => e.StandardWert, Value(0))
                    .Set(e => e.MinWert, Value(0))
                    .Set(e => e.Einheit, Value("l/sec"))
                    .Set(e => e.MessQuelle, Value("Sensor"))
                    .Set(e => e.MessAutomatisch, Value(true))
                    .Set(e => e.MessBereich, Value("Strang"))
                    .Set(e => e.MessUnterBereich, Value(""))
                    .Set(e => e.IstAktiv, Value(true))
                    .Set(e => e.ParamDatenTyp, Value(EzvParam.DatenTyp.Matrix))
                    .Set(e => e.ParamTyp, Value(EzvParam.EzvParamTyp.Produktionsparameter));

                var ezvParamsMatrixElements = mapper.InsertsFor<EzvParamMatrixElement>(ezvMatrixParams.Count * 10, EzvTag)
                    .Set(e => e.EzvParam, SequentialFrom(ezvMatrixParams))
                    .Set(e => e.MatrixIndex, Count(1))
                    .Set(e => e.Wert, Random(0.0, 10.0));

                var ezvParamsMatrixMap = mapper.InsertsFor<EzvToParamMap>(ezvs.Count * ezvMatrixParams.Count, EzvTag)
                    .Set(e => e.Ezv, RepeatEach(SequentialFrom(ezvs), ezvMatrixParams.Count))
                    .Set(e => e.EzvParam, SequentialFrom(ezvMatrixParams))
                    // TODO: What do I do here?
                    .Set(e => e.MaxWert, Value(0))
                    .Set(e => e.ZielWert, Value(0))
                    .Set(e => e.MinWert, Value(0));
            }

            int segmentAnzahl = 10;
            var ezvQualitaetsParams = mapper.InsertsFor<EzvParam>(3, EzvTag)
                .Set(e => e.Name, Join(SequentialFrom("Laengen", "Quer", "Kanten"), Value("risse")))
                .Set(e => e.MaxWert, Value(5))
                .Set(e => e.StandardWert, Value(5))
                .Set(e => e.MinWert, Value(1))
                .Set(e => e.Einheit, Value("Sterne"))
                .Set(e => e.MessQuelle, Value("Fachkraft"))
                .Set(e => e.MessAutomatisch, Value(false))
                .Set(e => e.MessBereich, Value("Strang"))
                .Set(e => e.MessUnterBereich, Value(""))
                .Set(e => e.IstAktiv, Value(true))
                .Set(e => e.ParamDatenTyp, Value(EzvParam.DatenTyp.Matrix))
                .Set(e => e.ParamTyp, Value(EzvParam.EzvParamTyp.Qualitaetsparameter));

            var ezvQualitaetsParamsMatrixElements = mapper.InsertsFor<EzvParamMatrixElement>(ezvQualitaetsParams.Count * segmentAnzahl, EzvTag)
                .Set(e => e.EzvParam, SequentialFrom(ezvQualitaetsParams))
                .Set(e => e.MatrixIndex, Count(1))
                .Set(e => e.Wert, Value(0));

            var ezvQualitaetsParamsMap = mapper.InsertsFor<EzvToParamMap>(ezvs.Count * ezvQualitaetsParams.Count, EzvTag)
                .Set(e => e.Ezv, RepeatEach(SequentialFrom(ezvs), ezvQualitaetsParams.Count))
                .Set(e => e.EzvParam, SequentialFrom(ezvQualitaetsParams))
                .Set(e => e.MaxWert, Value(5))
                .Set(e => e.ZielWert, Value(5))
                .Set(e => e.MinWert, Value(3));


            int anlagenAnzahl = 3;
            int chargenProAnlage = 3;
            var anlagenOrte = RandomFrom("Nord", "Sued", "Ost", "West");
            var pfannen = mapper.InsertsFor<Pfanne>(anlagenAnzahl, AnlagenTag)
                .Set(e => e.Name, Join(RandomFrom("Grosse", "Kleine", "Mittlere"), Value(" Pfanne"), Value(" "), anlagenOrte))
                .Set(e => e.Text, Value("Eine Pfanne"))
                .Set(e => e.Lebensdauer, Random(40, 70)) // TODO: Limit it to values like 45,50,55,60,...
                .Set(e => e.Lebensalter, Random(50))
                .Set(e => e.Gewicht, Random(20, 50));

            var verteiler = mapper.InsertsFor<Verteiler>(anlagenAnzahl, AnlagenTag)
                .Set(e => e.Name, Join(RandomFrom("Grosser", "Kleiner", "Mittlerer"), Value(" Verteiler"), Value(" "), anlagenOrte))
                .Set(e => e.Text, Value("Ein Verteiler"))
                .Set(e => e.Lebensdauer, Random(40, 70)) // TODO: Limit it to values like 45,50,55,60,...
                .Set(e => e.Lebensalter, Random(50))
                .Set(e => e.Gewicht, Random(70, 100));

            var straenge = mapper.InsertsFor<Strang>(anlagenAnzahl, AnlagenTag)
                .Set(e => e.Name, Join(RandomFrom("Grosser", "Kleiner", "Mittlerer"), Value(" Strang"), Value(" "), anlagenOrte))
                .Set(e => e.Text, Value("Ein Strang"))
                .Set(e => e.Lebensdauer, Random(40, 70)) // TODO: Limit it to values like 45,50,55,60,...
                .Set(e => e.Lebensalter, Random(50))
                .Set(e => e.Gewicht, Random(70, 100));

            var kokillen = mapper.InsertsFor<Kokille>(anlagenAnzahl, AnlagenTag)
                .Set(e => e.Name, Join(RandomFrom("Grosse", "Kleine", "Mittlere"), Value(" Kokille"), Value(" "), anlagenOrte))
                .Set(e => e.Text, Value("Eine Kokille"))
                .Set(e => e.Lebensdauer, Random(40, 70)) // TODO: Limit it to values like 45,50,55,60,...
                .Set(e => e.Lebensalter, Random(50))
                .Set(e => e.Gewicht, Random(7, 15));

            var kokillenFormate = mapper.InsertsFor<KokilleFormat>(kokillen.Count, AnlagenTag)
                .Set(e => e.Kokille, SequentialFrom(kokillen))
                .Set(e => e.Breite, Random(90, 120))
                .Set(e => e.Hoehe, Random(15, 30));

            var chargen = mapper.InsertsFor<Charge>(4 * anlagenAnzahl * chargenProAnlage, AnlagenTag)
                .Set(e => e.Name, Join(Value("Charge "), Count()))
                .Set(e => e.PlanGewicht, Random(70, 140))
                .Set(e => e.GewichtAbweichung, RandomFrom(Value(0), Random(-15, 15)).WithWeights(3, 1))
                .Set(e => e.Ezv, RandomFrom(ezvs))
                .Set(e => e.KokilleFormat, RandomFrom(kokillenFormate));

            var fertigeChargen = mapper.InsertsFor<Charge>(10, AnlagenTag)
                .Set(e => e.Name, Join(Value("Charge "), Count(chargen.Count)))
                .Set(e => e.PlanGewicht, Random(70, 140))
                .Set(e => e.GewichtAbweichung, RandomFrom(Value(0), Random(-15, 15)).WithWeights(3, 1))
                .Set(e => e.Ezv, RandomFrom(ezvs))
                .Set(e => e.KokilleFormat, RandomFrom(kokillenFormate));

            {
                var chargenSequence = SequentialFrom(chargen);
                var chargenToPfanneMap = mapper.InsertsFor<ChargeToPfanneMap>(anlagenAnzahl * chargenProAnlage, AnlagenTag)
                    .Set(e => e.Charge, chargenSequence)
                    .Set(e => e.Anlage, SequentialFrom(pfannen))
                    .Set(e => e.StartZeit, Random(DateTime.Now.AddDays(-1), DateTime.Now.AddDays(1)));

                var chargenToVerteilerMap = mapper.InsertsFor<ChargeToVerteilerMap>(anlagenAnzahl * chargenProAnlage, AnlagenTag)
                    .Set(e => e.Charge, chargenSequence)
                    .Set(e => e.Anlage, SequentialFrom(verteiler))
                    .Set(e => e.StartZeit, Random(DateTime.Now.AddDays(-1), DateTime.Now.AddDays(1)));

                var chargenToStrangMap = mapper.InsertsFor<ChargeToStrangMap>(anlagenAnzahl * chargenProAnlage, AnlagenTag)
                    .Set(e => e.Charge, chargenSequence)
                    .Set(e => e.Anlage, SequentialFrom(straenge))
                    .Set(e => e.StartZeit, Random(DateTime.Now.AddDays(-1), DateTime.Now.AddDays(1)));

                var chargenToKokilleMap = mapper.InsertsFor<ChargeToKokilleMap>(anlagenAnzahl * chargenProAnlage, AnlagenTag)
                    .Set(e => e.Charge, chargenSequence)
                    .Set(e => e.Anlage, SequentialFrom(kokillen))
                    .Set(e => e.StartZeit, Random(DateTime.Now.AddDays(-1), DateTime.Now.AddDays(1)));
            }

            var produktTypen = mapper.InsertsFor<ProduktTyp>(40, AnlagenTag)
                .Set(e => e.Name, RandomFrom(Join(
                                                    RandomFrom("BMW", "Audi", "Opel", "Mercedes", "Volvo", "Ford"),
                                                    Value(" "),
                                                    RandomFrom("Motorhaube", "Stahlrahmen", "Traeger", "Blech")),
                                             Join(
                                                    RandomFrom("Dosen", "Schiffs", "Flugzeugs", "Waschmaschinen"),
                                                    Value(" "),
                                                    RandomFrom("Blech", "Stahlplatte", "Billigblech", "Blech"))
                                                ))
                .Set(e => e.GeplanteLaenge, Random(10, 50));

            var produkte = mapper.InsertsFor<Produkt>(chargen.Count * 4, AnlagenTag)
                .Set(e => e.Charge, RepeatEach(SequentialFrom(chargen), 4))
                .Set(e => e.IndexInCharge, SequentialFrom(new int[] { 1, 2, 3, 4 }))
                // TODO: Name as virtual column? Or view?
                // TODO: Virtual column support (getter only properties)
                .Set(e => e.ProduktTyp, RandomFrom(produktTypen))
                .Set(e => e.LaengeAbweichung, Random(-2.0, 2.0));

            var fertigeProdukte = mapper.InsertsFor<Produkt>(fertigeChargen.Count * 4, AnlagenTag)
                .Set(e => e.Charge, RepeatEach(SequentialFrom(fertigeChargen), 4))
                .Set(e => e.IndexInCharge, SequentialFrom(new int[] { 1, 2, 3, 4 }))
                // TODO: Name as virtual column? Or view?
                // TODO: Virtual column support (getter only properties)
                .Set(e => e.ProduktTyp, RandomFrom(produktTypen))
                .Set(e => e.LaengeAbweichung, Random(-4.0, 4.0))
                .Set(e => e.ProduktionsZeit, Random(DateTime.Now.AddDays(-1), DateTime.Now));

            {
                var produktParams = mapper.InsertsFor<ProduktParam>(fertigeProdukte.Count * ezvQualitaetsParams.Count, AnlagenTag)
                    .Set(e => e.Produkt, SequentialFrom(RepeatEach(SequentialFrom(fertigeProdukte), ezvQualitaetsParams.Count)))
                    .Set(e => e.EzvParam, SequentialFrom(ezvQualitaetsParams))
                    .Set(e => e.Wert, RandomFrom(Value(5), Random(1, 5)).WithWeights(2, 1)); // TODO: This should be a calculated value

                var produktSegmentParams = mapper.InsertsFor<ProduktSegmentParam>(produktParams.Count * segmentAnzahl, AnlagenTag)
                    .Set(e => e.Segment, Count(1))
                    .Set(e => e.ProduktParam, SequentialFrom(RepeatEach(SequentialFrom(produktParams), segmentAnzahl)))
                    .Set(e => e.Wert, RandomFrom(Value(5), Random(1, 5)).WithWeights(2, 1));
            }

            // TODO: Charge (mass insert) (for now I'll just use the existing script)

            {
                var warenkoerbe = mapper.InsertsFor<Warenkorb>(4, VerkaufenTag)
                    .Set(e => e.Name, SequentialFrom("John", "Adam", "Doe", "Eve"));

                var warenkorbEintraege = mapper.InsertsFor<WarenkorbEintrag>(warenkoerbe.Count * 7, VerkaufenTag)
                    .Set(e => e.Warenkorb, RandomFrom(warenkoerbe))
                    .Set(e => e.Anzahl, Random(1, 100))
                    // TODO: Rethink the produkt stuff. A produkt should probably only be a product-definition.
                    // And then there should be a product-instance.
                    .Set(e => e.ProduktTyp, RandomFrom(produktTypen));

                var lieferdienste = mapper.InsertsFor<Lieferdienst>(5, VerkaufenTag)
                    .Set(e => e.Name, SequentialFrom("DHL", "Amazon Drone", "UPS", "Post", "Yodel"));

                var lieferungen = mapper.InsertsFor<Lieferung>(15, VerkaufenTag)
                    .Set(e => e.Lieferdienst, RandomFrom(lieferdienste))
                    .Set(e => e.Status, RandomFrom("Fertig", "In Bearbeitung", "Verloren"))
                    // TODO: Fertige lieferungen sollten logischerweise schon geliefert sein
                    .Set(e => e.LieferDatum, Random(DateTime.Now, DateTime.Now.AddDays(100)));

                var bestellungen = mapper.InsertsFor<Bestellung>(lieferungen.Count, VerkaufenTag)
                    .Set(e => e.Warenkorb, RandomFrom(warenkoerbe))
                    .Set(e => e.Lieferung, SequentialFrom(lieferungen));

                var bestellungProdukteMap = mapper.InsertsFor<BestellungToProdukteMap>(lieferungen.Count * 10, VerkaufenTag)
                    .Set(e => e.Bestellung, SequentialFrom(bestellungen))
                    .Set(e => e.Produkt, RandomFrom(SequentialFrom(produkte), SequentialFrom(fertigeProdukte))); // TODO: More Randomness
            }
        }

        private static void OutputSqlFiles(string path, Mapper mapper, int outputIndex, string tag)
        {
            OutputText(path, $"{outputIndex}_1_Tables_{tag}.sql", mapper.ToStringCreateOrReplace(tag));
            OutputText(path, $"{outputIndex}_2_Constraints_{tag}.sql", mapper.ToStringAlter(tag));
            OutputText(path, $"{outputIndex}_3_Triggers_{tag}.sql", mapper.ToStringTriggersAndSequences(tag));
            OutputText(path, $"{outputIndex}_4_Inserts_{tag}.sql", mapper.ToStringInserts(tag));
        }

        public static void OutputText(string path, string fileName, string content)
        {
            bool outputToFile = true;
            string filePath = Path.Combine(path, fileName);
            if (outputToFile)
            {
                File.WriteAllText(filePath, Header);
                File.AppendAllText(filePath, content);
            }
            else
            {
                var color = Console.ForegroundColor;
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine($"-- {filePath}");
                Console.ForegroundColor = color;
                Console.WriteLine(content);
                Console.WriteLine();
            }
        }
    }
}
